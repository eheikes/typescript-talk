.ft-section(data-id="intro")
  .ft-page(data-id="title")
    .stack-center
      .stacked-center
        h1.bright Intro to Typescript
        // I'm not an expert, but been using it for a year or so
        // v2+ is nicer than v1
  .ft-page(data-id="what-is-ts")
    .stack-center
      .stacked-center
        h1 What Is Typescript?
        p.ft-fragment “Typed superset of JS”
  .ft-page(data-id="venn")
    .stack-center
      .stacked-center
        img(src="img/venn.png", alt="Venn diagram of JS today, JS Next, and TS.")
        // very similar with a little bit extra.
        // not as different as Coffeescript. Not as different/abstracted and separate as Dart.
  .ft-page(data-id="two-parts")
    .stack-center
      .stacked-center
        .column-container
          .column.left-align
            h2 Transpiler
            ul
              li Compiles down to JS
              // like Babel, Closure Compiler
              li Module bundling
              // like Webpack, Rollup
          .column.ft-fragment.left-align
            h2 Static Typing
            ul
              li Type checking at compile time
              li Actually optional
  .ft-page(data-id="why-ts")
    .stack-center
      .stacked-center
        h1 Why Typescript?
        p.ft-fragment Easier to write and mantain Javascript projects (especially large ones)
  .ft-page(data-id="why-parts")
    .stack-center
      .stacked-center
        .column-container
          .column.left-align
            h2 Transpiler
            ul
              li Compile down to the target ES version
              li Bundle into the format you want
              li Syntactic sugar for interfaces, overloading, generics, etc
          .column.ft-fragment.left-align
            h2 Static Typing
            // JS doesn’t have types
            ul
              li No need to write tests (or code) to check variable types
              li Provides inline documentation
              li Easy to get started and port legacy code
  .ft-page(data-id="why-parts-2")
    .stack-center
      .stacked-center
        .column-container
          .column.left-align
            h2 Linting
            ul
              li Catches more mistakes in your code (gaps in logic, etc)
              li Safer refactoring — guarantees all the pieces fit together
            // normal JS interpreter is loose by definition
          .column.left-align.ft-fragment
            h2 Popular &amp Well-Supported
            ul
              li Regular releases and active community
              li Babel, Electron, and others support TS now
.ft-section(data-id="getting-started")
  .ft-page(data-id="title")
    .stack-center
      .stacked-center
        h1 Compiling Your First Program
  .ft-page(data-id="installing")
    .stack-center
      .stacked-center
        pre
          code.bash $ npm install -g typescript
  .ft-page(data-id="compiling")
    .stack-center
      .stacked-center
        div.left-align
          pre
            code.bash $ tsc app.ts
          pre.ft-fragment
            code.bash $ tsc app     # assumes .ts extension
          pre.ft-fragment
            code.bash $ tsc         # uses config
          pre.ft-fragment
            code.bash $ tsc -p src  # set the root folder
          pre.ft-fragment
            code.bash $ tsc -w      # watch for changes
  .ft-page(data-id="transpilation")
    .stack-center
      .stacked-center
        .column-container
          .left-column.left-align
            h2 app.ts
            pre
              code.typescript
                |function greet(person) {
                |    return `Hello ${person}!`;
                |}
                |const name = 'John';
                |console.log(greet(name));
            // other than the filename, just normal JS
          .middle-column.ft-fragment ⇒
          .right-column.left-align.ft-fragment
            h2 app.js
            pre
              code.javascript
                |function greet(person) {
                |    return "Hello " + person + "!";
                |}
                |var name = 'John';
                |console.log(greet(name));
            // almost the same, only ES5
            // because TS is a superset of JS
  .ft-page(data-id="esnext")
    .stack-center
      .stacked-center
        .column-container
          .left-column.left-align
            h2 app.ts
            pre
              code.typescript
                |function getName() {
                |    return Promise.resolve('John');
                |}
                |async function greetPerson() {
                |    let person = await getName();
                |    return `Hello ${person}!`;
                |}
                |console.log(greetPerson());
            // async/await
          .middle-column.ft-fragment ⇒
          .right-column.left-align.ft-fragment
            h2 app.js
            pre
              code.javascript
                |var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
                |    // snip
                |};
                |var __generator = (this && this.__generator) || function (thisArg, body) {
                |    // snip
                |};
                |function getName() {
                |    return Promise.resolve('John');
                |}
                |function greetPerson() {
                |    return __awaiter(this, void 0, void 0, function () {
                |        var person;
                |        return __generator(this, function (_a) {
                |          // snip
                |        });
                |    });
                |}
                |console.log(greetPerson());
            // transpiled for ES5
  .ft-page(data-id="js-checks")
    .stack-center
      .stacked-center
        .column-container
          .left-column.left-align
            pre
              code.typescript
                |[] + [];
                |
                |
                |
                |"hello" - 1;
                |
                |
                |
                |
                |function add(a,b) {
                |    return
                |        a + b;
                |}
            // Stuff that is valid in JS, but you wouldn't want to do.
          .middle-column.ft-fragment ⇒
          .right-column.left-align.ft-fragment
            pre
              code.javascript
                |[] + [];
                |// ^ Operator '+' cannot be applied to types 
                |//   'undefined[]' and 'undefined[]'.
                |
                |"hello" - 1;
                |// ^ The left-hand side of an arithmetic operation must be of
                |//   type 'any', 'number' or an enum type.
                |
                |function add(a, b) {
                |    return;
                |    a + b;
                |    // ^ Unreachable code detected.
                |}
            // still tries to output valid JS!
.ft-section(data-id="types")
  .ft-page(data-id="title")
    .stack-center
      .stacked-center
        h1 Type Annotations
  .ft-page(data-id="type-annotations")
    .stack-center
      .stacked-center
        .column-container
          .left-column.left-align
            pre
              code.typescript
                |function greet(person: string) {
                |    return `Hello ${person}!`;
                |}
                |const name = 3;
                |console.log(greet(name));
            // other than the filename, just normal JS
          .middle-column.ft-fragment ⇒
          .right-column.left-align.ft-fragment
            pre
              code.javascript
                |function greet(person) {
                |    return "Hello " + person + "!";
                |}
                |var name = 3;
                |console.log(greet(name));
                |//                ^ Argument of type '3' is not assignable
                |//                  to parameter of type 'string'.
  .ft-page(data-id="basic-types")
    .stack-center
      .stacked-center
        h2 Basic Types
        .ft-fragment.left-align
          h3 Primitives
          pre
            code
              |let num: number;
              |let str: string;
              |let bool: boolean;
              |let u: undefined = undefined;
              |let n: null = null;
        .ft-fragment.left-align
          h3 Arrays
          pre
            code.typescript let boolArray: boolean[];
  .ft-page(data-id="basic-types-2")
    .stack-center
      .stacked-center
        .left-align
          h3
            code Any
          pre
            code.typescript
              |let notSure: any = 4;
              |notSure = "maybe a string instead";
              |notSure.ifItExists();
        .ft-fragment.left-align
          h3 Functions
          pre
            code.typescript
              |function getHello(name: string): string { return `Hello ${name}`; }
              |function warn(): void { alert("Warning!"); }
              |function error(): never { throw new Error("Error!"); }
  .ft-page(data-id="extended-types")
    .stack-center
      .stacked-center
        h2 Extended Types
        div.ft-fragment.left-align
          h3 Enum
          pre
            code.typescript
              |enum Color {Red, Green, Blue}
              |let c: Color = Color.Green;
        div.ft-fragment.left-align
          h3 Union
          pre
            code.typescript
              |let numOrString: number|string;
        div.ft-fragment.left-align
          h3 Optional Parameter
          pre
            code.typescript
              |function getHello(firstName: string, lastName?: string): string {
              |    return `Hello ${firstName} ${lastName || ''}`;
              |}
          // can be undefined
          // note that it goes after the var name
  .ft-page(data-id="interfaces")
    .stack-center
      .stacked-center
        h2 Interface
        .column-container.left-align
          .left-column.left-align
            pre
              code.typescript
                |interface Point {
                |    x: number;
                |    y: number;
                |    z?: number;
                |}
                |
                |let p1: Point = {
                |    x: 1, y: 2, z: 3
                |}
                |
                |class MyPoint implements Point {
                |  x: number; y: number;
                |}
                |let p: Point = new MyPoint();
          .middle-column.ft-fragment ⇒
          .right-column.left-align.ft-fragment
            pre
              code.javascript
                |var p1 = {
                |    x: 1, y: 2, z: 3
                |};
                |var MyPoint = (function () {
                |    function MyPoint() {
                |    }
                |    return MyPoint;
                |}());
                |var p2 = new MyPoint();
          // sort of like an alias -- defines the shape of a value
          // implements keyword
          // nothing in the output!
  .ft-page(data-id="prop-extensions")
    .stack-center
      .stacked-center
        h2 More Keywords
        div.ft-fragment.left-align
          h3 Readonly
          pre
            code.typescript
              |interface Point {
              |    readonly x: number;
              |    readonly y: number;
              |}
        div.ft-fragment.left-align
          h3 Public/Private/Protected
          pre
            code.typescript
              |class Animal {
              |    private name: string;
              |    constructor(theName: string) { this.name = theName; }
              |}
              |new Animal("Cat").name; // error!
  .ft-page(data-id="inference")
    .stack-center
      .stacked-center
        h2 Inference
        p Typescript can often figure out types by examining your code.
        .left-align
          pre.ft-fragment
            code.typescript let x = 3;
          pre.ft-fragment
            code.typescript let x = [0, 1, null];
        p.ft-fragment So type annotations are only needed where you want to:
          ul
            li.ft-fragment enforce a type,
            li.ft-fragment or define a type when TS can't infer it.
.ft-section(data-id="advanced-typing")
  .ft-page(data-id="title")
    .stack-center
      .stacked-center
        h1 Working With Types
        // more advanced stuff
        //- this parameter? http://www.typescriptlang.org/docs/handbook/functions.html#this-parameters
        //- mixins/implements (http://www.typescriptlang.org/docs/handbook/mixins.html)
        //- type aliases -- http://www.typescriptlang.org/docs/handbook/advanced-types.html
        //- namespaces (http://www.typescriptlang.org/docs/handbook/namespaces.html) I don't use much -- more of DT stuff
        //-   ul
        //-     li see http://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html
        //-     li https://basarat.gitbooks.io/typescript/content/docs/project/namespaces.html
        //- function overloads (http://www.typescriptlang.org/docs/handbook/functions.html#overloads)
  .ft-page(data-id="generics")
    .stack-center
      .stacked-center
        h2 Generics
        p.ft-fragment Example syntax:
          |
          |
          code.typescript Array&lt;number&gt;
        pre.ft-fragment.left-align
          code.typescript
            |class Queue&lt;T&gt; {
            |    private data = [];
            |    push = (item: T) =&gt; this.data.push(item);
            |    pop = (): T =&gt; this.data.shift();
            |}
        pre.ft-fragment.left-align
          code.typescript
            |const queue = new Queue&lt;number&gt;();
            |queue.push(0);
        // familiar if you work with OOP languages like Java, C++
        // typically used with classes
  .ft-page(data-id="type-assertions")
    .stack-center
      .stacked-center
        h2 “Casting” (Type Assertions)
        .ft-fragment
          p Sometimes you know more about a variable’s type than TS does.
          p
            em Use only to when you have to,
            |
            | because TS assumes you are correct in your assertion.
        .ft-fragment.left-align
          pre
            code.typescript
              |function handler(event: Event) {
              |    let mouseEvent = event as MouseEvent; // preferred
              |    let mouseEvent = &lt;MouseEvent&gt;event;
              |}
  .ft-page(data-id="type-declarations-easy")
    .stack-center
      .stacked-center
        h1 3rd-Party Type Declarations (Easy Way)
        pre
          code.typescript import * as $ from "jquery";
        .column-container
          .column.left-align
            .ft-fragment
              p Use the
                |
                |
                a(href="http://definitelytyped.org/") DefinitelyTyped
                |
                | repository to find “high quality TypeScript type definitions.”
            .ft-fragment
              pre
                code.bash $ npm install @types/jquery -D
              p TS will automatically use these @types modules.
            .ft-fragment
              p Use
                |
                |
                a(href="https://microsoft.github.io/TypeSearch/") microsoft.github.io/TypeSearch
                |
                | to search for modules.
          .column.ft-fragment
              img(src="img/typesearch.png", alt="", style={height: "50vh"})
  .ft-page(data-id="type-declarations-harder")
    .stack-center
      .stacked-center
        h1 3rd-Party Type Declarations (Slightly Harder Way)
        p.ft-fragment Create your own declarations in the
          |
          |
          code .ts
          |
          | file, or a
          |
          code .d.ts
          |
          |
          | declaration file (recommended).
        // .d.ts tells TS there is no actual code in there
        pre.left-align.ft-fragment
          code.typescript
            | declare module "foobar"; // simply declare that a module exists
            | import * as f from "foobar";
        pre.left-align.ft-fragment
          code.typescript
            | /// &lt;reference path="foobar.d.ts" /&gt;
            | import * as f from "foobar";
        p.ft-fragment Look at other libraries’ declarations and the DT website for best practices.
.ft-section(data-id="using-ts")
  .ft-page(data-id="project-config")
    .stack-center
      .stacked-center
        h1 Project Configuration
  .ft-page(data-id="tsconfig")
    .stack-center
      .stacked-center
        h2 tsconfig.json
        p Add a
          |
          |
          code tsconfig.json
          |
          |
          | file to your project folder to configure the TS compiler.
        ul
          li.ft-fragment Can start with empty
            |
            |
            code {}
          li.ft-fragment Run
            |
            |
            code tsc --init
            |
            |
            |to create a
            |
            |
            code tsconfig.json
            |
            |.
          li.ft-fragment TS will automatically look for and use a config file.
  .ft-page(data-id="tsconfig-files")
    .stack-center
      .stacked-center
        h2 Specifying Files
        .column-container
          .column.left-align.ft-fragment(style={"padding-right": "5em"})
            pre
              code.json
                |{
                |    "files": [
                |        "core.ts",
                |        "sys.ts",
                |        "types.ts"
                |    ]
                |}
          .column.left-align.ft-fragment(style={"padding-right": "5em"})
            pre
              code.json
                |{
                |    "include": [
                |        "src/**/*"
                |    ],
                |    "exclude": [
                |        "node_modules",
                |        "**/*.spec.ts"
                |    ]
                |}
  .ft-page(data-id="compiler-options")
    .stack-center
      .stacked-center
        h2 Compiler Options
        pre.ft-fragment.left-align
          code.json
            |{
            |  "compilerOptions": {
            |      "module": "commonjs",
            |      "noImplicitAny": true,
            |      "removeComments": true,
            |      "preserveConstEnums": true,
            |      "sourceMap": true
            |  }
            |}
        p.ft-fragment Reference:
          |
          |
          a(href="http://www.typescriptlang.org/docs/handbook/compiler-options.html") www.typescriptlang.org/docs/handbook/compiler-options.html
  .ft-page(data-id="output-options")
    .stack-center
      .stacked-center
        h2 Output Options
        ul
          li.ft-fragment
            code target
            |:
            |
            code es3
            |
            | (default),
            |
            code es5
            |,
            |
            code es6
            |,
            |
            code es2015
            |,
            |
            code es2016
            |,
            |
            code es2017
            |,
            |
            code esnext
          li.ft-fragment
            code module
            |:
            |
            code none
            |,
            |
            code es6
            |,
            |
            code commonjs
            |,
            |
            code amd
            |,
            |
            code system
            |,
            |
            code umd
          li.ft-fragment
            code outFile
            |: concatenate and emit to a single file
          li.ft-fragment
            code outDir
            |: output folder
          li.ft-fragment
            code removeComments
            |: strips comments except those beginning with
            |
            |
            code /*!
          li.ft-fragment
            code declaration
            |: output a
            |
            |
            code .d.ts
            |
            |
            |file
          li.ft-fragment
            code sourceMap
            |: output a
            |
            |
            code .map
            |
            |
            |file
  .ft-page(data-id="lib-options")
    .stack-center
      .stacked-center
        h2 Included Declarations
        pre.ft-fragment.left-align
          code.json(style={"font-size": "1em", "line-height": "1.25em"})
            |{
            |  "compilerOptions": {
            |    "lib": [
            |      "es5",
            |      "es2015",
            |      "es2016",
            |      "es2017",
            |      "esnext",
            |      "dom",
            |      "dom.iterable",
            |      "webworker",
            |      "scripthost",
            |      // others ...
            |    ]
            |  }
            |}
        p.ft-fragment If not specified, TS will include libs based on the
          |
          |
          code target
          |
          |
          |version.
  .ft-page(data-id="js-options")
    .stack-center
      .stacked-center
        h2 Migration Options
        pre.ft-fragment.left-align
          code.json
            |{
            |  "compilerOptions": {
            |    "allowJs": true,
            |    "checkJs": true
            |  }
            |}
        p.ft-fragment Type annotations are
          |
          |
          em not
          |
          |
          |allowed in JS files; only checks that ES is valid.
  .ft-page(data-id="strict-options")
    .stack-center
      .stacked-center
        h2 Stricter Checking
        p Enable these after a migration, or from the start, for tighter type checking.
        ul
          li.ft-fragment
            code alwaysStrict
            |: parse in strict mode and emit
            |
            |
            code "use strict"
          li.ft-fragment
            code strictNullChecks
            |:
            |
            |
            code null
            |
            |
            |and
            |
            |
            code undefined
            |
            |
            |must be explicitly added to types
          li.ft-fragment
            code noImplicitAny
            |: error if any expression or declaration has an
            |
            |
            em implied
            |
            |
            code any
            |
            |
            |type
          li.ft-fragment
            code noImplicitThis
            |: catches instances where
            |
            |
            code this
            |
            |
            |is bound to the global context
          li.ft-fragment
            code strict
            |: all of the above
  .ft-page(data-id="dev-tools")
    .stack-center
      .stacked-center
        h1 Dev/Build Tools
        ul
          li.ft-fragment IDEs
            ul
              li Show compile errors, have autocomplete, go to declarations, etc
              li Built-in to VSCode; supported in others
          li.ft-fragment Frameworks
            ul
              li Built-in to Angular &amp; Aurelia
              li Extensions available for other frameworks (React, Vue, etc)
              li TS has JSX support
              li Many quick-start &amp; boilerplate projects
          li.ft-fragment Plugins – gulp, webpack loader (ts-loader), browserify (tsify)
          li.ft-fragment Linting
            ul
              li TS has some built-in linting options
              li
                a(href="https://palantir.github.io/tslint/") tslint
              li
                a(href="https://github.com/eslint/typescript-eslint-parser") typescript-eslint-parser
        // TS is pretty popular and has good support in the JS ecosystem
.ft-section(data-id="conclusion")
  .ft-page(data-id="gotchas")
    .stack-center
      .stacked-center
        h1 Gotchas
        ul
          li.ft-fragment It’s harder than writing plain old Javascript!
            ul
              li New syntax to learn
              li Must keep track of type declarations in addition to JS variable declarations
              li In general, have to know more about how the compiler works
          li.ft-fragment TS annotations live inside your JS code.
            ul
              li.ft-fragment Look at alternatives (Flow, Closure) if you want annotations outside your code.
          li.ft-fragment If you don’t like OOP, the extra OO stuff in TS might turn you off.
            // but you don't have to use it
          li.ft-fragment Errors are descriptive, but may contain perplexing terminology (e.g. "ambient module").
          li.ft-fragment Module resolution is still tricky in JS.
            ul
              li Multiple module formats (ES6, CJS) with varying support across platforms
              li
                code import
                |
                |
                |vs
                |
                |
                code require
                |
                |
                |module resolution
              li
                code export
                |
                |
                |is different based on the module format
          li.ft-fragment
            a(href="http://thejameskyle.com/adopting-flow-and-typescript.html") May be more work
            |
            |to migrate existing JS codebases than Flow.
        // TS minimizes the overhead pretty well
  .ft-page(data-id="thanks")
    .stack-center
      .stacked-center
        h1 Thanks
        p.ft-fragment
          a(href="http://www.typescriptlang.org") www.typescriptlang.org
          // official docs good
        p.ft-fragment
          a(href="https://www.gitbook.com/book/basarat/typescript") TypeScript Deep Dive
          |
          |
          |has nice Tips section, Common Errors section, migration guide
        p.ft-fragment
          a(href="https://github.com/eheikes/typescript-talk") github.com/eheikes/typescript-talk
        p.ft-fragment
          a(href="https://twitter.com/ericheikes") @EricHeikes
